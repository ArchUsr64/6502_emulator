mod cpu;
use std::collections::HashMap;

use cpu::*;
use egui_macroquad::*;

mod app;
use app::App;
use log::{info, LevelFilter};

use simplelog::{ColorChoice, Config, TermLogger, TerminalMode};

use macroquad::prelude::{
	clear_background, draw_rectangle, draw_rectangle_lines, is_key_down, next_frame, rand,
	screen_height, screen_width, Color, KeyCode, BLACK, WHITE,
};
const SCREEN_MEMORY_START: usize = 0xfb00;
const INPUT_MEMORY_LOCATION: usize = 0xfb;
const RNG_MEMORY_LOCATION: usize = 0xff;

use clap::Parser;

const DEFAULT_INSTRUCTIONS_PER_FRAME: u32 = 100;

/// A simple 6502 emulator
#[derive(Parser, Debug)]
struct Args {
	/// Path to the 6502 binary
	#[arg(default_value = "a.out")]
	executable: String,
	/// Debug Verbosity level [0-2]
	#[arg(short, long, default_value_t = 0)]
	verbosity: u8,
	/// Start in debug mode
	#[arg(short, long, default_value_t = false)]
	start_debug: bool,
	/// Number of CPU instructions to execute per frame
	#[arg(short, long, default_value_t = DEFAULT_INSTRUCTIONS_PER_FRAME)]
	instructions_per_frame: u32,
	/// Debug symbols generated by the provided assembler
	#[arg(short, long, default_value_t = String::from("symbols.dbg"))]
	debug_symbols: String,
	/// Assembly source code
	#[arg(short, long, default_value_t = String::from("examples/snake.asm"))]
	assembly_source: String,
}

#[macroquad::main("6502 Emulator")]
async fn main() {
	let args = Args::parse();
	#[cfg(target_family = "unix")]
	TermLogger::init(
		match args.verbosity {
			1 => LevelFilter::Info,
			2 => LevelFilter::Debug,
			_ => LevelFilter::Error,
		},
		Config::default(),
		TerminalMode::Mixed,
		ColorChoice::Auto,
	)
	.unwrap();

	let mut debug_symbols_map: HashMap<usize, u16> = HashMap::new();
	#[cfg(target_family = "wasm")]
	let file = include_str!("../symbols.dbg");
	#[cfg(target_family = "unix")]
	let file = std::fs::read_to_string(args.debug_symbols).expect("Failed to read debug symbols");
	file.lines().for_each(|line| {
		let line_number: usize = line.split_whitespace().nth(0).unwrap().parse().unwrap();
		let pc_address: u16 =
			u16::from_str_radix(line.split_whitespace().last().unwrap(), 16).unwrap();
		debug_symbols_map.insert(line_number, pc_address);
	});

	#[cfg(target_family = "wasm")]
	let file = include_str!("../examples/snake.asm");
	#[cfg(target_family = "unix")]
	let file = std::fs::read_to_string(args.assembly_source).expect("Failed to read debug symbols");
	let source_file: Vec<String> = file.lines().map(|i| String::from(i)).collect();

	let mut last_pc_value = 0;
	let mut debug_symbols: Vec<u16> = Vec::with_capacity(source_file.len());
	for (line_number, _) in source_file.iter().enumerate() {
		if let Some(&pc_addr) = debug_symbols_map.get(&(line_number + 1)) {
			debug_symbols.push(pc_addr);
			last_pc_value = pc_addr;
		} else {
			debug_symbols.push(last_pc_value);
		}
	}

	let data = read_mem(&args.executable);
	let mut mem = Memory::new(data);
	let mut cpu = Cpu::new();
	let mut app = App::new(debug_symbols, source_file);

	app.paused = args.start_debug;
	// TODO: Handle the case when the user explicity sets the value to be the default
	app.instructions_per_frame = if args.instructions_per_frame != DEFAULT_INSTRUCTIONS_PER_FRAME {
		args.instructions_per_frame
	} else {
		args.instructions_per_frame * 60 / macroquad::time::get_fps() as u32
	};
	loop {
		if app.reset {
			cpu = Cpu::new();
			mem = Memory::new(data);
			app.reset = false;
		}
		let mut execute_one_cycle = || -> u16 {
			info!("{cpu:?}");
			cpu.execute(&mut mem);
			mem.data[RNG_MEMORY_LOCATION] = rand::gen_range(u8::MIN, u8::MAX);
			// Left, Down, Up, Right
			mem.data[INPUT_MEMORY_LOCATION] =
				(is_key_down(KeyCode::Left) | is_key_down(KeyCode::A)) as u8;
			mem.data[INPUT_MEMORY_LOCATION + 1] =
				(is_key_down(KeyCode::Down) | is_key_down(KeyCode::S)) as u8;
			mem.data[INPUT_MEMORY_LOCATION + 2] =
				(is_key_down(KeyCode::Up) | is_key_down(KeyCode::W)) as u8;
			mem.data[INPUT_MEMORY_LOCATION + 3] =
				(is_key_down(KeyCode::Right) | is_key_down(KeyCode::D)) as u8;
			cpu.state().program_counter
		};
		if !app.paused {
			for _ in 0..app.instructions_per_frame {
				if app.breakpoints_addresses().contains(&execute_one_cycle()) {
					break;
				};
			}
		} else if app.step {
			execute_one_cycle();
			app.step = false;
		}
		if app
			.breakpoints_addresses()
			.contains(&cpu.state().program_counter)
		{
			app.paused = true;
		}
		// Window Decorations
		clear_background(BLACK);
		let screen_size = (screen_width(), screen_height());
		let min_screen_dimension = screen_size.0.min(screen_size.1);
		let pixel_size = 0.95 * min_screen_dimension / 32.;
		let gap = (
			screen_size.0 - 32. * pixel_size,
			screen_size.1 - 32. * pixel_size,
		);
		draw_rectangle_lines(
			(gap.0 / 2.) - 2.,
			(gap.1 / 2.) - 2.,
			(pixel_size * 32.) + 4.,
			(pixel_size * 32.) + 4.,
			5.,
			WHITE,
		);
		(0..32).for_each(|i| {
			(0..32).for_each(|j| {
				let color = |byte| {
					Color::new(
						(byte >> 5) as f32 / 8.,
						((byte >> 2) % 8u8) as f32 / 8.,
						(byte % 4) as f32 / 4.,
						1.,
					)
				};
				draw_rectangle(
					gap.0 / 2. + j as f32 * pixel_size,
					gap.1 / 2. + i as f32 * pixel_size,
					pixel_size,
					pixel_size,
					color(mem.data[SCREEN_MEMORY_START + (i << 5) + j]),
				);
			})
		});

		egui_macroquad::ui(|egui_ctx| {
			app.render_ui(egui_ctx, &cpu, &mem);
		});

		egui_macroquad::draw();

		next_frame().await
	}
}

fn read_mem(file_path: &str) -> [u8; MEMORY_SIZE] {
	#[cfg(target_family = "unix")]
	let rom = std::fs::read(file_path).unwrap();
	#[cfg(target_family = "wasm")]
	let rom = include_bytes!("../a.out");
	let mut data = [0; MEMORY_SIZE];
	for (index, val) in rom.iter().enumerate() {
		data[index] = *val;
	}
	data
}
